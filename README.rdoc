= Rspec Cells

<em>Spec your Cells.</em>

{<img src="https://secure.travis-ci.org/apotonick/rspec-cells.png" />}[http://travis-ci.org/apotonick/rspec-cells]

This plugin allows you to test your cells easily using RSpec. Basically, it adds a cells example group with a <tt>#render_cell</tt> helper.

Cells is Rails' popular {view components framework}[http://github.com/apotonick/cells].

= Installation

This gem runs with RSpec2+ and Rails 3+.

  # Gemfile

  group :development, :test do
    gem "rspec-cells"
  end

  # rails_helper.rb

  require 'rspec/cells'

= Usage

Simply put all your specs in the <tt>spec/cells</tt> directory or add type: :cell to the describe block.
However, let the cell generator do that for you!

  rails g cell blog_post show -t rspec

will create an exemplary <tt>spec/cells/blog_post_cell_spec.rb</tt> for you.


== API

describe PostsCell do
    describe "search posts" do
      let(:search) { render_state(:search) }

      it "should have a search field" do
        expect(search).to have_field("Search by Title")
      end

      it "should have a search button" do
        expect(search).to have_button("Search")
      end
    end

    describe "latest posts" do
      subject { render_state(:latest) }

      it { is_expected.to have_css("h3.title", :text => "Latest Posts") }
      it { is_expected.to have_table("latest_posts") }
      it { is_expected.to have_link("View all Posts") }
      it { is_expected.to_not have_button("Create Post") }
      it { is_expected.to_not have_field("Search by Title") }
    end
  end

You can see all capybara matchers and finders {here}[http://rubydoc.info/github/jnicklas/capybara/master/Capybara/Node/Simple].

== Running the specs

Run your examples with

  rake spec:cells

If you need more helpers, matchers and stuff, {just let us know}[http://cells.rubyforge.org/community.html].

== Test cells with caching

By default your code for caching code is not run if you set <tt>ActionController::Base.perform_caching = false</tt>
That's a reasonable default but you might want to increase coverage by running caching code at least once.
Here is an example:

  describe SomeCell do
    describe 'caching' do
      enable_cell_caching!
      # Code for testing...
    end
  end


== Contributors

* Jorge Cal√°s Lozano <calas@qvitta.net> (Cleanup, capybara string matchers)
* Abdelkader Boudih <@seuros>

== LICENSE

Copyright (c) 2010, Nick Sutterer

Copyright (c) 2008-2009, Dmytro Shteflyuk <kpumuk@kpumuk.info> http://kpumuk.info

Released under the MIT License.
